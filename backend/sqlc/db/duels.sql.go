// Code generated by sqlc. DO NOT EDIT.
// source: duels.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const listDuelsWithLimit = `-- name: ListDuelsWithLimit :many
SELECT
    id,
    league_id,
    user_1_id,
    user_2_id,
    deck_1_id,
    deck_2_id,
    result,
    created_at
FROM duels
WHERE confirmed_at IS NOT NULL
    AND deleted_at IS NULL
ORDER BY created_at
LIMIT $1
`

type ListDuelsWithLimitRow struct {
	ID        int32         `json:"id"`
	LeagueID  sql.NullInt32 `json:"league_id"`
	User1ID   string        `json:"user_1_id"`
	User2ID   string        `json:"user_2_id"`
	Deck1ID   int32         `json:"deck_1_id"`
	Deck2ID   int32         `json:"deck_2_id"`
	Result    int32         `json:"result"`
	CreatedAt time.Time     `json:"created_at"`
}

func (q *Queries) ListDuelsWithLimit(ctx context.Context, limit int32) ([]ListDuelsWithLimitRow, error) {
	rows, err := q.db.QueryContext(ctx, listDuelsWithLimit, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDuelsWithLimitRow
	for rows.Next() {
		var i ListDuelsWithLimitRow
		if err := rows.Scan(
			&i.ID,
			&i.LeagueID,
			&i.User1ID,
			&i.User2ID,
			&i.Deck1ID,
			&i.Deck2ID,
			&i.Result,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
