// Code generated by sqlc. DO NOT EDIT.
// source: leagues.sql

package db

import (
	"context"
)

const getLeague = `-- name: GetLeague :one
SELECT
    id, name, created_at, updated_at, deleted_at
FROM leagues
WHERE id = $1
`

func (q *Queries) GetLeague(ctx context.Context, id int32) (League, error) {
	row := q.db.QueryRowContext(ctx, getLeague, id)
	var i League
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listLeagues = `-- name: ListLeagues :many
SELECT 
    id,
    name
FROM leagues
WHERE deleted_at IS NULL
ORDER BY id
`

type ListLeaguesRow struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) ListLeagues(ctx context.Context) ([]ListLeaguesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLeagues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListLeaguesRow
	for rows.Next() {
		var i ListLeaguesRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
